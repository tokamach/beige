* DONE Project Planning
** DONE Which Architecture?
- ARM
- x86
- other?
** Watch out for
*** Paging
*** Interrupts
** DONE Toolchain
*** Cross Compiler
*** QEMU
*** test machine??
** Problems/Gaps
- Lisp Machines are dead, Lisp research dead
- but VM tech has improved (JIT compilers) (thanks java)

- concurrency is needed for further speed, single core won't get faster
- conventional shared mem concurrency is unsafe
- Functional programming/concurrency ensures safety
- x86 is not suited to lisp like languages (functional, dynamic)

- hence: a VM OS optimized for safe (functional) concurrency
** Ideas
*** declarative OS
- declarative configuration
- increased configurability
- reliable and reproducible state  
*** better multi core OS
*** minimal side effects OS
*** transactional OS

** Literature Survey
- identify gaps in research
- find references to *support* your observations
- this will lead to a stronger /background/ section
- reference list revauls the quality of your research

** plan search
- identify keywords (concurrency OS, multithreading, functional concurrency)
- date?
* DONE Proposal
  SCHEDULED: <2019-10-21 Mon>
** Intro
** Background
-  yang et al (p103-yang.pdf) virtual memory support for gargage collected applications 
** Impl
** Work Plan
** Resources Required
* TODO Report [0%]
  - dear god come up with a title
** [ ] Abstract
   - use a few sentences to summarize the project
   - needs its own page
   - 200 words max
** [ ] Intro
   - start with sentence of breif aims of project
   - aim of the project
   - what problem do we address
   - aims of project in bullet points
   - finish with chapter by chapter overview of report
** [ ] Background
   - relevant research
   - relevant work/existing systems
     + how does this improve on that
   - justify platform, solution, etc
     + don't stray too far into implementation or design, you do that later
   - 
** [ ] Design
** [ ] Implementation
** [ ] Testing
** [ ] Conclusion

* Links
- https://wiki.osdev.org/Expanded_Main_Page
- https://github.com/littlekernel/lk
- https://github.com/SerenityOS/serenity

- fonts: https://github.com/Tecate/bitmap-fonts/tree/master/screenshots

- booting:  https://www.gnu.org/software/grub/manual/multiboot/multiboot.html


* Milestones
** TODO Miletstone 1: REPL
- Type characters which are displayed on screen
- Enter evaluates the chars as a Lisp expr and prints result
- persistent env across 'lines'
** TODO Milestone 2: GUI
- Show GUI windows on screen which can print arbitary text

* OS Plan
** Principles
- Lisp as primary language
- Immutable data structures first
- Memory is large, don't worry about it
- Lisp process consists of 'env' and code sections
** Scheduler
- calculate avg wait and turnaround time
- mark lisp processes for JIT
*** Round robin
** Process Model
*** Header
- id, name
- compiled?
- should be on the fly compiled?
*** Env
- just use a list initally (BAD)
- hashmap
- global vars, consts, functions in current scope
*** Stack
- lexically scoped vars
*** Code (List)
- Lisp List functions
*** Code (compiled)
- Lisp compiled
*** Thread Model
- children share parents env in a read only form
- children have their own private mutable envcat
** Memory Management
- SDM vol3 3
*** malloc
- needs tidying/more sanity checks
- needs bitmap
- needs block merging
*** free
- find block specified, mark as free
*** Memory Map
- kernel space: fixed
- kernel starts at 0x100000
- user space: grows upwards
*** Segmentation
- SDM vol3 3.2
- add *segment descriptor* to GDT
- 4 segments:
  kernel code
  kernel data
  userspace code
  userspace data
*** Paging
- track pages with AVL tree
- page table
- swap pages/page faults
** TODO Filesystem
*** ext2
*** serializable lisp
** TODO IO
*** keyboard
**** PS2 interface
*** mouse
** TODO Display
*** Terminal
**** printf
**** control chars
- tab alignment
*** Graphics
**** Window system
- see rio, early X wms, blit terminal?
- simple design
- show repl, env
**** Screen setup
- using VESA/VGA modes
**** Shape drawing library
**** GUI library
- use lisp and =(defwindow ...)=
** TODO stdlib
*** klib
- better print/debug
- sprintf
*** lisp-interface-lib
- all kernel calls available from lisp
- needs function type signature checks in lisp
** TODO Tests
- add test feature to Makefile
- full coverage unit tests
* Lisp Plan
- if they could do it on a PDP, you can do it too
** Parser
- no regex
- stateful, simple, fast
** VM
*** eval
- args: in_ast, env
- return: out_ast, env
*** eval_async
- env is read only
- args: in_ast
- return: out_ast
*** env
- =Sym='s should be stored in AST simply as an ID, which is looked up in the symbol table, an $O(1)$ operation. Symbol allocation is $O(n)$. Right now they're stored as a string and looked up each call (bad).
- /constant/ =Sym= evaluates to itself
- use a trie (?) for symbol lookup
*** types
- atom, list
** Compiler
- equal results and interchangeable with VM
** Memory Layout
- word (32bit) pair of car and cdr for cons cell
- odd addr is car, even is cdr
** Native Calls
- in env a native functions value is a function pointer to a C function
*** kernel env
- premade env with native functions for kprint, inb/outb, peek/poke
- a repl can run in kernel
- allows writing drivers in lisp
** Garbage Collector
- mark/sweep
- concurrently marks and sweeps
- flag objects dirty when modified
- unflag when marked
- don't sweep if dirty

*** Generational
- consider the generational hypothesis: most objects die young
- if an object survives the sweep, move it to a higher generation
- check higher generations less often
- store references across generations
- .NET uses 3 generations

*** Cons Pool
- use a 'pool' of cons cells. each time a cons is freed it gets added to the pool
- before kmalloc'ing a new cell, check the pool for frees
* Tasks
** General
- switch to NASM?
- literate programming? (nah)
** Memory
- use linked list to store mem map
- optimize for cons allocation
** DONE Segmentation
- get the fucking GDT installed so Bochs will quit whining
- basic flat model
** TODO Paging
- page allocator
- linked list or AVL Tree to store
- pages
** Lisp
- write tests for lisp code
*** Data types
*** eval
*** Kernel repl
- need keyboard driver
*** env
- remove nativef
- assign =Sym= values at startup
- add types, side effect inference
- hashmap for faster lookup
**** Kernel env
- useful low level functions
- peek/poke, inb/outb, direct memory access (unsafe!)
- kernel print
*** Parser
- add (x . y) syntax
- add correct checks for valid symbols, literals, mismatched parens
*** TODO Closures
    - save env stack in /Func/ type
    - or save it's captured vars in a single env
** TODO Interrupts
- get the fucking IDT working so it'll stop crashing, and we can handle triple faults
- write keeb handler
** Multitasking
** Userspace
** GUI
